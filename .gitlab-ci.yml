image: samuelbarata/ssof:latest

stages:
  - Linting
  - Analyse
  - Test

variables:
  LOG_LEVEL: DEBUG
  TOOL_NAME: py_analyser.py

.slices_script: &slices_script |
  for file in $SLICES_FOLDER/*.py; do
    slice_file=$(basename -- "$file")
    base_name_no_extension="${slice_file%.py}"
    patterns_file="${base_name_no_extension}.patterns.json"
    log_file="${base_name_no_extension}.log"
    expected_output_file="${base_name_no_extension}.output.json"
    echo "Slices folder: $SLICES_FOLDER"
    echo "Slice: $slice_file"
    echo "Patterns: $patterns_file"
    echo "Expected Output: $expected_output_file"
    cp $SLICES_FOLDER/${expected_output_file} $EXPECTED_OUTPUT_FOLDER/${expected_output_file}
    python3 $TOOL_NAME "$SLICES_FOLDER/${slice_file}" "$SLICES_FOLDER/${patterns_file}" --log-level $LOG_LEVEL --log-file $LOGS_FOLDER/$log_file --output-folder $OUTPUT_FOLDER || true
  done

.test_script: &test_script |
  errors=0
  for file in $EXPECTED_OUTPUT_FOLDER/*.output.json; do
    output_file=$(basename -- "$file")
    python3 validate.py --output $OUTPUT_FOLDER/${output_file} --target $EXPECTED_OUTPUT_FOLDER/${output_file} --silent || let "errors += 1"
  done
  if [ $errors -gt 0 ]; then
    echo -e "There were $errors errors"
    exit 1
  fi

Specification Slices:
  stage: Analyse
  before_script:
    - git clone https://gitlab-ci-token:${GITLAB_TOKEN}@${CI_SERVER_HOST}/ssof2324/project/Specification
  variables:
    SLICES_FOLDER: Specification/slices
    OUTPUT_FOLDER: output
    EXPECTED_OUTPUT_FOLDER: expected_output
    LOGS_FOLDER: logs
  script:
    - mkdir -p $LOGS_FOLDER
    - mkdir -p $OUTPUT_FOLDER
    - mkdir -p $EXPECTED_OUTPUT_FOLDER
    - *slices_script
  artifacts:
    paths:
      - $OUTPUT_FOLDER
      - $LOGS_FOLDER
      - $EXPECTED_OUTPUT_FOLDER
    expire_in: 1 week

Specification Slices Test:
  stage: Test
  needs:
    - job: Specification Slices
      artifacts: true
  variables:
    OUTPUT_FOLDER: output
    EXPECTED_OUTPUT_FOLDER: expected_output
  script:
    - *test_script

Local Slices:
  stage: Analyse
  variables:
    SLICES_FOLDER: tests
    OUTPUT_FOLDER: output
    EXPECTED_OUTPUT_FOLDER: expected_output
    LOGS_FOLDER: logs
  script:
    - mkdir -p $LOGS_FOLDER
    - mkdir -p $OUTPUT_FOLDER
    - mkdir -p $EXPECTED_OUTPUT_FOLDER
    - *slices_script
  artifacts:
    paths:
      - $OUTPUT_FOLDER
      - $LOGS_FOLDER
      - $EXPECTED_OUTPUT_FOLDER
    expire_in: 1 week

Local Slices Test:
  stage: Test
  needs:
    - job: Local Slices
      artifacts: true
  variables:
    OUTPUT_FOLDER: output
    EXPECTED_OUTPUT_FOLDER: expected_output
  script:
    - *test_script

Common Slices:
  stage: Analyse
  variables:
    SLICES_FOLDER: common-tests/tests
    OUTPUT_FOLDER: output
    EXPECTED_OUTPUT_FOLDER: expected_output
    LOGS_FOLDER: logs
  before_script:
    - git clone https://gitlab-ci-token:${GITLAB_TOKEN}@${CI_SERVER_HOST}/ssof2324/project/common-tests
    - mkdir -p $SLICES_FOLDER
    - |
      cd common-tests/
      remote_branches=$(git branch -r | grep -v "origin/HEAD")
      for branch in $remote_branches; do
        git checkout $branch
        for folder in */; do
          folder_name=$(basename "$folder")

          # Skip destination folder
          if [ "$folder_name" == "tests" ]; then
            continue
          fi

          # Loop through each file in the current folder
          for file in "$folder"/*; do
            if [ -f "$file" ]; then
              file_name=$(basename "$file")

              # Construct the new file name by prepending the folder name
              new_file_name="${folder_name}_${file_name}"

              # Copy the file to the tests directory with the new name
              cp "$file" "./tests/$new_file_name"

              echo "Copied: $file to ./tests/$new_file_name"
            fi
          done
        done
      done
      cd ..
  script:
    - mkdir -p $LOGS_FOLDER
    - mkdir -p $OUTPUT_FOLDER
    - mkdir -p $EXPECTED_OUTPUT_FOLDER
    - *slices_script
  artifacts:
    paths:
      - $OUTPUT_FOLDER
      - $LOGS_FOLDER
      - $EXPECTED_OUTPUT_FOLDER
    expire_in: 1 week

Common Slices Test:
  stage: Test
  needs:
    - job: Common Slices
      artifacts: true
  variables:
    OUTPUT_FOLDER: output
    EXPECTED_OUTPUT_FOLDER: expected_output
  script:
    - *test_script

Linting:
  stage: Linting
  allow_failure: true
  script:
    - autopep8 $TOOL_NAME --experimental --ignore E501 --exit-code > /dev/null || (echo -e "You should run the linter using the command:\n\$ autopep8 $TOOL_NAME --experimental --ignore E501 -i" && exit 1)
